const SEND_MESSAGE_EVENT_SIG =
  "0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036";
const TXN_HASH =
  "0x72b2898f4f50e6a95141590a18acfff8fb5ed6c6cf67613bfdcde124093e2464";
const PROOF =
  "0xf907ed8426660460b901605afe7d4be9ba06b5acd9034a75498d0ba975f7aa4d67b4a8ebe69abf2593069a3bfbca32b4590be48f2a9174fa69041ad264f6d84b2d5ed440b17161f5a1352db9020c37e895f8c387f5588f7fe0a6bc92103156acbdf03cf79f2db1b40c633c3d6889772aff3303f3d1b32b4b726545e28cc7b208f3979f7af1cadf11e8845a97fa19d5d3f3c9eba043cea97ecda6a15312c71f9c9433210ee958eee798c8342aecbb6d8a3a4fdb62195a28be7ece8fca083971d3a4e1c557a67161bded30efa6c57763e888f9f53764b9adc488f915607f7bf9ffd4422a6c9f598877934239e57bf7701e923baf787c16a86e197fa96a8d8adc6ce4d9af32fcd7d4ddc450c09867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756afcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e07f4a2140be0b68c44775ae3edaf685d305cdaa65f213514413d7fd58334ab120840157be758461b4a9b3a014f9ce9dac69726f6eacd33b7223f60c4c80983ec268ee08eb80c0ed01a4a02fa0898412c2270ed3aedca366422491fcc816c45848467ce01190ca932b2f20b0b6b902e9f902e60183028948bf901dbf89994ab914bd287fcc388742d3916ca261bf58aea7113e1a08c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036b860000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000206162636400000000000000000000000000000000000000000000000000000000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a00000000000000000000000005d7e7b133e5f16c75a18e3b04ac9af85451c209ca0000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8b8a000000000000000000000000000000000000000000000000000028c1b924dd00000000000000000000000000000000000000000000000000023c5761eb79305a00000000000000000000000000000000000000000000002ee837c11f5f5f999b100000000000000000000000000000000000000000000000023c2ea03254535a00000000000000000000000000000000000000000000002ee837e9e11884769b1b90346f90343f851a06a92b932178f2e31438423f5de0a9c1a992d241b7e376e631906743c2ee92ad380808080808080a0cea3b73515adb1c9441d65e43ce95269ba13131c9b548b8644dd747c19835ae48080808080808080f902ed31b902e9f902e60183028948bf901dbf89994ab914bd287fcc388742d3916ca261bf58aea7113e1a08c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036b860000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000206162636400000000000000000000000000000000000000000000000000000000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a00000000000000000000000005d7e7b133e5f16c75a18e3b04ac9af85451c209ca0000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8b8a000000000000000000000000000000000000000000000000000028c1b924dd00000000000000000000000000000000000000000000000000023c5761eb79305a00000000000000000000000000000000000000000000002ee837c11f5f5f999b100000000000000000000000000000000000000000000000023c2ea03254535a00000000000000000000000000000000000000000000002ee837e9e11884769b182000180";

async function main() {
  // >>>>>>>>>>>> MaticPOSClient from @maticnetwork/maticjs >>>>>>>>>>>>
  //   const { parent, child } = require("../../utils");
  //   const maticPOSClient = new require("@maticnetwork/maticjs").MaticPOSClient({
  //     network: "testnet", // when using mainnet, replace to "mainnet"
  //     version: "mumbai", // when using mainnet, replace to "v1"
  //     maticProvider: child.rpc, // when using mainnet, replace to matic mainnet RPC endpoint
  //     parentProvider: parent.rpc, // when using mainnet, replace to ethereum mainnet RPC endpoint
  //   });
  //   const proof = maticPOSClient.posRootChainManager
  //     .customPayload(
  //       TXN_HASH, // replace with txn hash of sendMessageToRoot
  //       SEND_MESSAGE_EVENT_SIG // SEND_MESSAGE_EVENT_SIG, do not change
  //     )
  //     .then(console.log);
  //   return proof;

  const { getFxPortalClient } = require("../../utils");
  const client = await getFxPortalClient();

  const isCheckpointed = await client.isCheckPointed(TXN_HASH);
  if (isCheckpointed) {
    const proof = await client.exitUtil.buildPayloadForExit(
      TXN_HASH,
      SEND_MESSAGE_EVENT_SIG,
      false
    );
    console.log("Checkpointed!");
    return proof;
  } else {
    console.log("Not yet checkpointed!");
    return "";
  }
}

// npx hardhat run scripts/proof.js --network goerli
main()
  .then((proof) => {
    console.log("proof: ", proof);
    process.exit(0);
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
